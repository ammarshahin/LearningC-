//! Notes: No new stuff just an introduction to programming and cpp coding and compiling

//* As computers have grown more powerful, computer programs have become larger and more complex. In response to these conditions, computer languages have evolved so that itâ€™s easier to manage the programming process.The C language incorporated features such as control structures and functions to better control the flow of a program and to enable a more structured, modular approach.To these tools C++ adds support for object-oriented programming and generic programming.This enables even more modularity and facilitates the creation of reusable code, which saves time and increases program reliability.

//* The popularity of C++ has resulted in a large number of implementations for many computing platforms; the C++ ISO standards (C++98/03 and C++11) provide a basis for keeping these many implementations mutually compatible.The standards establishes the features the language should have, the behavior the language should display, and a standard library of functions, classes, and templates.The standards supports the goal of a portable language across different computing platforms and different implementations of the language.

//* To create a C++ program, you create one or more source files containing the program as expressed in the C++ language.These are text files that must be compiled and linked to produce the machine-language files that constitute executable programs.These tasks are often accomplished in an IDE that provides a text editor for creating the source files, a compiler and a linker for producing executable files, and other resources, such as project management and debugging capabilities. But the same tasks can also be performed in a command-line environment by invoking the appropriate tools individually